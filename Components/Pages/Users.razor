@page "/users"
@inject UserService UserService
@inject IJSRuntime JSRuntime
@using ScreenTracker1.Models
@using ScreenTracker1.Services
@using System.Text.Json
@using ScreenTracker1.DTOS
@using Microsoft.JSInterop;
@using System.IdentityModel.Tokens.Jwt;
@inject NavigationManager NavigationManager
@inject DesktopAutoCaptureService desktopAutoCaptureService
@inject AfkTrackerService afkTrackerService


<div class="stitch-header">
    <h3 class="stitch-heading">Welcome @UserName</h3>
    <button class="stitch-logout-btn" @onclick="OnLogoutClicked">Logout</button>
</div>@if (isAdmin)
{
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else if (users.Count == 0)
{
    <p>No users found.</p>
}
else
{
        <div class="selectbox">
            <select @onchange="OnSelectedUserChanged" class="stitch-user-select">
                <option value="">Select a user</option>
                @foreach (var user in users)
                {
                    <option value="@user.username">@user.username</option>
                }
            </select>
        </div>
      
         }
}

@if (userId != null && appUsageList != null)
{
    <div class="stitch-container">

        <div class="stitch-toolbar">
            <button class="stitch-nav-btn" @onclick="() => ChangeDate(-1)">←</button>

            <input type="date"
                   id="activityDate"
                   @onchange="OnDateChanged"
                   value="@selectedDate.ToString("yyyy-MM-dd")"
                   class="stitch-date-picker" />

            <button class="stitch-nav-btn" @onclick="() => ChangeDate(1)">→</button>
            <div class="auto-refresh">

                <label class="label" style="font-size: 16px;">Auto Refresh</label>
            <select class="stitch-dropdown" @onchange="OnIntervalChanged" value="@selectedInterval">
                <option value="0">Off</option>
                <option value="10">10s</option>
                <option value="20">20s</option>
                <option value="30">30s</option>
            </select>

            <div style="flex-grow: 1;"></div>
            </div>
            <button class="stitch-refresh-btn" @onclick="OnViewScreenshotsClicked">My Screen</button>

            <button class="stitch-refresh-btn" @onclick="OnRefreshClicked">Refresh</button>
@* <span class="stitch-refresh-btn" @onclick="OnToggleStateClicked" aria-label="Toggle State">
    <i class="@ToggleIcon"></i>
</span> *@
        </div>


        <canvas id="barChart" class="stitch-chart"></canvas>

        <div class="stitch-info">
            <h4>Activity for @selectedDate.ToString("dd-MM-yyyy")</h4>
            <div class="info-row">
                <span>Login At: <strong>@LoginTime</strong></span>
                </div>
                <div class="info-row">
                <span>AFK Time: <strong>@FormatDuration(totalAfkMinutes)</strong></span>

                </div>

            <div class="info-row">
           
                <span>Time Active: <strong>@FormatDuration(totalTimeInMinutes)</strong></span>
            </div>
        </div>

        <div class="stitch-tabs">
            <div class="stitch-tab @(selectedTab == "summary" ? "active" : "")" @onclick='() => SelectTab("summary")'>Summary</div>
            <div class="stitch-tab @(selectedTab == "window" ? "active" : "")" @onclick='() => SelectTab("window")'>Window</div>
        </div>

        <div class="stitch-tab-content">
            @if (selectedTab == "summary")
            {
                <div class="stitch-summary-grid">
                    <section class="stitch-card">
                        <h4>Top Applications</h4>
                        @if (appUsageList.Any())
                        {
                            var totalAppTime = appUsageList.Sum(a => a.durationInMinutes);
                            @foreach (var app in appUsageList)
                            {
                                var percent = (app.durationInMinutes / totalAppTime) * 100;
                                <div class="stitch-bar">
                                    <div style="width:@percent%;background-color:@GetDynamicColor(app.appName);height:100%;"></div>
                                    <span class="label"
                                          @onclick="() => OnAppClick(app.appName)"
                                     >
                                        @app.appName
                                    </span>
                                    <span class="time">@FormatDuration(app.durationInMinutes)</span>
                                </div>
                            }

                            <div class="stitch-button-row">
                                @if (appUsageList.Count >= 5 && appUsageList.Count < totalAppUsageRecords)
                                {
                                    <button class="stitch-btn" @onclick="LoadMoreAppUsage">Show More</button>
                                }

                                @if (currentAppUsagePage > 1)
                                {
                                    <button class="stitch-btn" @onclick="ShowLessAppUsage">Show Less</button>
                                }
                            </div>
                        }
                        else
                        {
                            <p>No applications to display.</p>
                        }
                    </section>

                    <section class="stitch-card">

                       
                        <h4>Top Window Titles "@selectedAppName"</h4>
                        @if (appTitleList.Any())
                        {
                            var totalTitleTime = appTitleList.Sum(t => t.durationInMinutes);
                            foreach (var title in appTitleList)
                            {
                                var percent = (title.durationInMinutes / totalTitleTime) * 100;
                                <div class="stitch-bar">
                                    <div style="width:@percent%;background-color:@GetDynamicColor(title.title);height:100%;"></div>

                                    <span class="label" data-tooltip="@title.title">@title.title</span>
                                    <span class="time">@FormatDuration(title.durationInMinutes)</span>
                                </div>
                            }
                            <div class="stitch-button-row">
                                @if (appTitleList.Count >= 5 || appTitleList.Count < totalAppTitleRecords)
                                {
                                    <button class="stitch-btn" @onclick="LoadMoreTitles">Show More</button>
                                }
                                @if (currentTitlePage > 1)
                                {
                                    <button class="stitch-btn" @onclick="ShowLessTitles">Show Less</button>
                                }
                            </div>
                        }
                        else
                        {
                            <p>No window titles available for this date.</p>
                        }
                    </section>
                     <section class="stitch-card">
                   
                        <h4>Top Categorie for "@selectedAppName"</h4>
                        @if (categoryKeywordGroups.Any())
                        {
                            var totalCategoryTime = categoryKeywordGroups.Sum(c => c.totalDurationInMinutes);
                            foreach (var category in categoryKeywordGroups)
                            {
                                var percent = (category.totalDurationInMinutes / totalCategoryTime) * 100;
                                <div class="stitch-bar">
                                    <div style="width:@percent%;background-color:@GetDynamicColor(category.category);height:100%;"></div>
                                    <span class="label">@category.category</span>
                               @*      <span class="time">@FormatDuration(category.totalDurationInMinutes)</span> *@
                                </div>
                            }
                            <div class="stitch-button-row">
                            
                                    @if (categoryKeywordGroups.Count >= 5 || categoryKeywordGroups.Count < totalCategoryRecords)
                                    {
                                        <button class="stitch-btn" @onclick="LoadMoreCategories">Show More</button>
                                    }

                                    @if (currentCategoryPage > 1)
                                    {
                                        <button class="stitch-btn" @onclick="ShowLessCategories">Show Less</button>
                                    }


                            </div>
                        }
                        else
                        {
                            <p>No category data available for this date.</p>
                        }
                    </section>

                </div>
            }
        </div>

        <div class="stitch-tab-content">
            @if (selectedTab == "window")
            {
                <div class="stitch-summary-grid">
                    <section class="stitch-card">
                        <h4>Top Applications</h4>
                        @if (appUsageList.Any())
                        {
                            var totalAppTime = appUsageList.Sum(a => a.durationInMinutes);
                            @foreach (var app in appUsageList)
                            {
                                var percent = (app.durationInMinutes / totalAppTime) * 100;
                                <div class="stitch-bar">
                                    <div style="width:@percent%;background-color:@GetDynamicColor(app.appName);height:100%;"></div>
                                    <span class="label"
                                          @onclick="() => OnAppClick(app.appName)">
                                        @app.appName
                                    </span>
                                    <span class="time">@FormatDuration(app.durationInMinutes)</span>
                                </div>
                            }

                            <div class="stitch-button-row">
                                @if (appUsageList.Count >= 5 && appUsageList.Count < totalAppUsageRecords)
                                {
                                    <button class="stitch-btn" @onclick="LoadMoreAppUsage">Show More</button>
                                }

                                @if (currentAppUsagePage > 1)
                                {
                                    <button class="stitch-btn" @onclick="ShowLessAppUsage">Show Less</button>
                                }
                            </div>
                        }
                        else
                        {
                            <p>No applications to display.</p>
                        }
                    </section>

                    <section class="stitch-card">
                        <h4>Top Window Titles for "@selectedAppName"</h4>

                        @if (appTitleList.Any())
                        {
                            var totalTitleTime = appTitleList.Sum(t => t.durationInMinutes);
                            foreach (var title in appTitleList)
                            {
                                var percent = (title.durationInMinutes / totalTitleTime) * 100;
                                <div class="stitch-bar">
                                    <div style="width:@percent%;background-color:@GetDynamicColor(title.title);height:100%;"></div>
                                    <span class="label" data-tooltip="@title.title">@title.title</span>
                                    <span class="time">@FormatDuration(title.durationInMinutes)</span>
                                </div>
                            }

                            <div class="stitch-button-row">
                                @if (appTitleList.Count >= takePerPage)
                                {
                                    <button class="stitch-btn" @onclick="LoadMoreTitles">Show More</button>
                                }

                                @if (currentTitlePage > 1)
                                {
                                    <button class="stitch-btn" @onclick="ShowLessTitles">Show Less</button>
                                }
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(selectedAppName))
                        {
                            <p>No window titles available for @selectedAppName on this date.</p>
                        }
                        else
                        {
                            <p>Click an application above to view window titles.</p>
                        }
                    </section>

                </div>
            }
        </div>

    </div>
}

@code {
    private List<User> users;
    private string selectedUsername;
    private User selectedUser;
    private List<AppUsage> appUsageList;
    private List<AppTitle> appTitleList;
    private string selectedTab = "summary";
    private DateTime selectedDate = DateTime.Today;
    private List<string> labels = new();
    private List<double> data = new();
    private List<CategoryKeywordGroup> categoryKeywordGroups;
    private int currentTitlePage = 1;
    private const int titlePageSize = 5;
    private bool moreTitlesAvailable = true;
    private List<AppTitle> initialAppTitleList = new();
    private int currentAppUsagePage = 1;
    private const int appUsagePageSize = 5;
    private bool moreAppUsageAvailable = true;
    private List<AppUsage> initialAppUsageList = new();

    private int currentCategoryPage = 1;
    private const int categoryPageSize = 5;
    private bool moreCategoriesAvailable = true;
    private List<CategoryKeywordGroup> initialCategoryList = new();
    private string token;
    private bool isAdmin;

    private int currentPage = 1;
    private int totalPages = 1;
    private const int itemsPerPage = 5;
    private List<AppUsage> appUsageListuser = new List<AppUsage>();
    private string UserName;


    private int userId;
    private double totalTimeInMinutes => appUsageList?.Sum(a => a.durationInMinutes) ?? 0;

    private int totalAppUsageRecords;
    private int totalAppTitleRecords;
    private int totalCategoryRecords;

    private int selectedInterval = 0;
    private System.Timers.Timer? _refreshTimer;

    private string selectedAppName;
    private const int takePerPage = 5;
    private string? LoginTime;

    private List<Screenshots> screenshots = new();
    private bool showScreenshots = false;

    private bool isOn = false;

    private double totalAfkMinutes;

    private string ToggleIcon => isOn ? "fa-solid fa-toggle-on" : "fa-solid fa-toggle-off"; 
    // private string ToggleIcon => isOn ? "fa-solid fa-toggle-off" : "fa-solid fa-toggle-on";

    private void OnToggleStateClicked()
    {
        isOn = !isOn; 

        if (isOn)
        {

            desktopAutoCaptureService.Start();
        }
        else
        {

            desktopAutoCaptureService.StopTimer();
        }
    }

    private async Task OnAppClick(string appName)
    {
        selectedAppName = appName;
        currentTitlePage = 1;
        currentCategoryPage = 1;
        moreTitlesAvailable = true;


        var titles = await UserService.GetAppTitleDetailsAsync(
            selectedDate,
            userId,
            appName,
            page: currentTitlePage,
            take: takePerPage
        );

        appTitleList = new List<AppTitle>(titles);
        totalAppTitleRecords = appTitleList.Count;


        var categories = await UserService.GetCategoryByAppNameAsync(appName);
        categoryKeywordGroups = new List<CategoryKeywordGroup>(categories);
        totalCategoryRecords = categoryKeywordGroups.Count;

        StateHasChanged();
    }

    private void OnViewScreenshotsClicked()
    {

        NavigationManager.NavigateTo("/screenshots");
    }

    private void OnIntervalChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newInterval))
        {
            selectedInterval = newInterval;
            StartAutoRefresh(selectedInterval);
        }
    }

    private void StartAutoRefresh(int intervalInSeconds)

    {
        StopAutoRefresh();
        if (intervalInSeconds != 0)
        {
            _refreshTimer = new System.Timers.Timer(intervalInSeconds * 1000);
            _refreshTimer.Elapsed += async (sender, args) =>
            {
                await InvokeAsync(async () =>
                {
                    await OnRefreshClicked();
                });
            };
            _refreshTimer.AutoReset = true;
            _refreshTimer.Enabled = true;
        }
    }

    private void StopAutoRefresh()
    {
        if (_refreshTimer != null)
        {
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
            _refreshTimer = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        StartAutoRefresh(selectedInterval);
        await base.OnInitializedAsync();
        UserService.SetNavigationManager(NavigationManager);
        token = Preferences.Get("authToken", null);

        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadToken(token) as JwtSecurityToken;

            if (jwtToken != null)
            {

                UserName = jwtToken?.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;

                var role = jwtToken?.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
                isAdmin = role.ToLower() == "admin";
                var loginTimeClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "LoginTime")?.Value;
                if (!string.IsNullOrEmpty(loginTimeClaim))
                {
                    LoginTime = loginTimeClaim;
                }


                if (!isAdmin)
                {
                    var userIdClaim = jwtToken?.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

                    if (int.TryParse(userIdClaim, out int userId))
                    {
                        this.userId = userId;

                        await LoadDataAsync(userId);
                        await LoadAppUsageData();

                        
                        totalAfkMinutes = await UserService.GetAfkLogsTotalAsync(userId, selectedDate);

                        await UpdateChart();
                    }
                }
            }
        }
        else
        {
            Console.WriteLine("User not authenticated.");
        }

        if (isAdmin)
        {
            try
            {
                users = await UserService.GetAllUsersAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading users: {ex.Message}");
            }
        }
        StateHasChanged();
    }


    private void OnLogoutClicked()
 {
     Preferences.Set("authToken", null);
     NavigationManager?.NavigateTo("/login", forceLoad: true);

 }

    private async Task UpdateChart()
    {
        try
        {
            StateHasChanged();
            if (labels.Any() && data.Any()) await JSRuntime.InvokeVoidAsync("renderBarChart", labels, data);
        }
        catch (Exception ex) { Console.WriteLine($"Error rendering chart: {ex.Message}"); }
    }

    private async Task LoadDataAsync(int id)
    {
        try
        {
            var appUsageData = await UserService.GetAppUsageDataAsync(id);
            labels = appUsageData.Select(x => x.date).ToList();
            data = appUsageData.Select(x => x.totalDurationInMinutes).ToList();
            appTitleList = await UserService.GetAppTitleByDateAsync(selectedDate, id);
        }
        catch (Exception ex) { Console.WriteLine($"Error fetching data: {ex.Message}"); }
    }

    private async Task OnSelectedUserChanged(ChangeEventArgs e)
    {
        selectedUsername = e.Value?.ToString();
        selectedUser = users.FirstOrDefault(u => u.username == selectedUsername);
        if (selectedUser != null)
        {
            userId = selectedUser.id;
            await LoadDataAsync(userId);

           
            await LoadAppUsageData();
            await UpdateChart();
        }
        else
        {
            appUsageList = null;
            appTitleList = null;
        }
    }

    private void SelectTab(string tabName) => selectedTab = tabName;

    private string FormatDuration(double minutes)
    {
        int hours = (int)(minutes / 60);
        int remainingMinutes = (int)(minutes % 60);
        int seconds = (int)((minutes - (int)minutes) * 60);
        return $"{hours}h {remainingMinutes}m {seconds}s";
    }

    private string GetDynamicColor(string key)
    {

        var hash = key.GetHashCode();


        byte r = (byte)(160 + (hash & 0x3F) % 61);          
        byte g = (byte)(160 + ((hash >> 6) & 0x3F) % 61);
        byte b = (byte)(160 + ((hash >> 12) & 0x3F) % 61);

        return $"#{r:X2}{g:X2}{b:X2}";
    }

    private void ChangeDate(int days)
    {
        selectedDate = selectedDate.AddDays(days);
        _ = LoadAppUsageData();
        StateHasChanged();
    }

    private async Task LoadAppUsageData()
    {
        if (userId != null)
        {

            var appUsageData = await UserService.GetAppUsageDataAsync(userId);
            totalAppUsageRecords = appUsageData.Count; 
            currentAppUsagePage = 1;
            moreAppUsageAvailable = true;

            var appTitleData = await UserService.GetAppTitleByDateAsync(selectedDate, userId);
            totalAppTitleRecords = appTitleData.Count; 
            currentTitlePage = 1;
            moreTitlesAvailable = true;


            var categoryData = await UserService.GetGroupedCategoryKeywordsAsync(userId, selectedDate);
            totalCategoryRecords = categoryData.Count; 
            currentCategoryPage = 1;
            moreCategoriesAvailable = true;


            initialAppUsageList = await UserService.GetAppUsageByUserIdAsync(userId, selectedDate, page: 1, take: appUsagePageSize);
            appUsageList = new List<AppUsage>(initialAppUsageList);


            initialAppTitleList = await UserService.GetAppTitleByDateAsync(selectedDate, userId, page: 1, take: titlePageSize);
            appTitleList = new List<AppTitle>(initialAppTitleList);


            initialCategoryList = await UserService.GetGroupedCategoryKeywordsAsync(userId, selectedDate, page: 1, take: categoryPageSize);
            categoryKeywordGroups = new List<CategoryKeywordGroup>(initialCategoryList);

            StateHasChanged();
        }
    }
   private async Task LoadMoreTitles()
    {
        currentTitlePage++;

        var more = await UserService.GetAppTitleDetailsAsync(
            selectedDate,
            userId,
            selectedAppName,
            page: currentTitlePage,
            take: takePerPage
        );

        if (more.Any())
        {
            appTitleList.AddRange(more);
        }
        else
        {
            moreTitlesAvailable = false;
        }

        StateHasChanged();
    }


    private async Task ShowLessTitles()
    {
        currentTitlePage = 1;
        moreTitlesAvailable = true;

        var initial = await UserService.GetAppTitleDetailsAsync(
            selectedDate,
            userId,
            selectedAppName,
            page: currentTitlePage,
            take: takePerPage
        );

        appTitleList = new List<AppTitle>(initial);

        StateHasChanged();
    }

  private async Task OnDateChanged(ChangeEventArgs e)
    {
        selectedDate = DateTime.Parse(e.Value.ToString());
        await LoadAppUsageData();
        StateHasChanged();
    }

    private async Task OnRefreshClicked()
    {

        await LoadAppUsageData();
        await UpdateChart();
    }
private async Task LoadMoreAppUsage()
    {
        currentAppUsagePage++;
        var more = await UserService.GetAppUsageByUserIdAsync(
            userId,
            selectedDate,
            page: currentAppUsagePage,
            take: appUsagePageSize);

        if (more.Any())
            appUsageList.AddRange(more);
        else
            moreAppUsageAvailable = false;

        StateHasChanged();
    }

    private async Task ShowLessAppUsage()
    {
        currentAppUsagePage = 1;
        appUsageList = new List<AppUsage>(initialAppUsageList);
        moreAppUsageAvailable = true;
        StateHasChanged();
    }

    private async Task LoadMoreCategories()
    {
        currentCategoryPage++; 
        var more = await UserService.GetGroupedCategoryKeywordsAsync(userId, selectedDate, page: currentCategoryPage, take: categoryPageSize);

        if (more.Any())
        {
            categoryKeywordGroups.AddRange(more);
        }
        else
        {
            moreCategoriesAvailable = false;  
        }

        StateHasChanged();  
    }

    private async Task ShowLessCategories()
    {
        currentCategoryPage = 1; 
        categoryKeywordGroups = new List<CategoryKeywordGroup>(initialCategoryList); 
        moreCategoriesAvailable = true; 

        StateHasChanged();  
    }

}
<style>
    body{
        background-color: aliceblue
    }
</style>